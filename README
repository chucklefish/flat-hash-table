This is an implementation of a c++ hash set / map using open addressing and
robin hood hashing.  It is a zero-dependency copy of the implementation I wrote
for Starbound.

It has three main design goals, roughly in inverse order of importance:

- Be faster than std::unordered_map and std::unordered_set
- Be as compatible with std::unordered_map and std::unordered_set as possible
- Don't be clever

It contains a MOSTLY compatible re-implementation of std::unordered_map and
std::unordered_set, with the main exception being pointer stability.  With the
standard implementations, one may assume that the pointers to keys and values in
std::unordered_map and std::unordered_set will stay the same as long as the value
exists in the map / set.  That is very much NOT true with these, due to the
nature of open address hash tables, they will be changed on a rehash.

There has been very little micro-optimization done, these are mostly written to
just be as simple and obvious as possible.  Still, they are much faster than
std::unordered_map and std::unordered_set, at least for Starbound and also in
my informal testing.

If you're looking for the fastest possible hashtable, these are probably not it.
They are however simple, compatible, header-only, (hopefully) drop-in
replacements for the standard library implementations.

BAD PARTS
=========

- The included "tests" are are absolute garbage, and there are NO performance
  tests whatsoever.  The performance testing I DID do was mostly inside
  Starbound, where there was a measurable improvement.  These desperately need
  real benchmarks!

- I spent very little effort thinking about extreme corner case behavior like
  throwing move constructors etc, so there are probably limitations there in
  comparison to the versions in the standard library.

- The bucket vector size is always a power of two, there is nothing clever
  going on like using prime number bucket counts or anything like that to get
  around a bad std::hash implementation.  It is possible that, especially with
  the default hash functions on integers in c++ that this may cause problems
  for certiain key sets.  Use a good hash function!
